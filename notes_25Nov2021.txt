User module
	User.java		entity
	UserRepository.java	interface extends jpa repo
	UserService.java	class that autowires the repo
	UserController.java	class that autowires the service		url mappings
				this is a rest api

so it is advisable to run this REST api as a separater microservice		

you can have a new project for Eureka server

this REST api runs in 8383 and registers itself as an eureka client

Create a MVC project that runs in 8384
	access the REST api using feign client		(get an interface api that can be autowired to the 		controller)

mvc project controller methods return URL		view		jsp
	are we going to use HTML thymeleaf		or		JSP?

	we did not learn thymeleaf, so we can use JSP, with JSTL and spring form
	otherwise, you can learn thymeleaf		

3 projects running
1) eureka server
2) REST api	(a client for eureka)
3) MVC project  (that access the rest api using feign client)

-----------------------------------
in the same MVC project, 
	create another jsp file (already you created signup.jsp)	
		login.jsp

	user name:
	password:
	Remember me:
	
	below this form, put a hyper link,
		"new user? click here to signup"

	"here" should have hyperlink to take them to signup form
-----------------------
Password encryption:
	in your project, i do not want any password to be visibly unencrypted in database table.
	if i run a select query on USER_MASTER table, i should see the password as encrypted text.
	so keep the password column as maximum size

OTP authentication
	in java, we can send OTP emails by simple java code.
	ex:
		whenever they want to create account or change password, we can send otp and proceed.

Carousel
Accordion

--------------------------------

Cloud
	CI/CD

	Continous Integration
	Continous Development and Deployment

Not every developer have access to aws.
	the account is used by the deployer.	

Once the deployer, deploys the application in aws,
the developer wants to do some changes / updations in the project.

what is the problem?
	again the project should be deployed in the aws portal. But developer do not have access to aws.
	he depends on the deployer. The deployer understands the difficulty.

every time, developer makes changes, the application new version must be deployed once again in aws.

What should be the solution?
	the deployer creates a CI/CD pipeline. That will integrate GitHub (for example) with your aws elastic beanstalk

So the developer, just push the project to the git hub / git lab.	(we never upload our MFPE projects to github)
	BUT WE (AJ batches) have git lab (not git hub) cognizant account and they deploy in git lab.

if git lab is integrated with aws, then everytime, we push the project, the changes will reflect in aws.

CAN YOU BELIEVE THIS?


------------------------------------------------------
from a java program, (no matter, if it is a core java program or web app)
we can send email using GMAIL

i suggest, you create a new GMAIL account for your project purpose.
login to gmail and enable "Less secure app access"
	This settings is usually OFF so that this email id cannot be used to send emails from a program.


1) login to gmail
2) click account logo in right top
3) manage account
4) search for "less secure app access"
	turn it ON

create a maven project with the following dependency:
<dependency>
    <groupId>com.sun.mail</groupId>
    <artifactId>javax.mail</artifactId>
    <version>1.6.1</version>
</dependency>


write a java program to send email:
	i suggest you create a java method that accepts, toaddress, title and message

		Properties props = new Properties();
	        props.put("mail.smtp.host", "true");
	        props.put("mail.smtp.starttls.enable", "true");
	        props.put("mail.smtp.host", "smtp.gmail.com");
	        props.put("mail.smtp.port", "587");
	        props.put("mail.smtp.auth", "true");
	        //Establishing a session with required user details
	        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
	            protected PasswordAuthentication getPasswordAuthentication() {
	                return new PasswordAuthentication("YourGmailId@gmail.com", "xxxxxxxxxx");
	            }
	        });
	        try {
	            //Creating a Message object to set the email content
	            MimeMessage msg = new MimeMessage(session);
	            //Storing the comma seperated values to email addresses
	            String to = "rjagadeeswaran@yahoo.com";
	            /*Parsing the String with defualt delimiter as a comma by marking the boolean as true and storing the email
	            addresses in an array of InternetAddress objects*/
	            InternetAddress[] address = InternetAddress.parse(to, true);
	            //Setting the recepients from the address variable
	            msg.setRecipients(Message.RecipientType.TO, address);
	            String timeStamp = new SimpleDateFormat("yyyymmdd_hh-mm-ss").format(new Date());
	            msg.setSubject("Sample Mail : " + timeStamp);
	            msg.setSentDate(new Date());
	            msg.setText("Sampel System Generated mail");
	            msg.setHeader("XPriority", "1");
	           
	            Transport.send(msg);
	            System.out.println("Mail has been sent successfully");
	        } catch (MessagingException mex) {
	            System.out.println("Unable to send an email:\n" + mex);
	        }


=================================
---------------------------------

package java_mail_demo;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class Main {

	public static void main(String[] args) {
        System.out.println( "Hello World!" );
   	 Properties props = new Properties();
     props.put("mail.smtp.host", "true");
     props.put("mail.smtp.starttls.enable", "true");
     props.put("mail.smtp.host", "smtp.gmail.com");
     props.put("mail.smtp.port", "587");
     props.put("mail.smtp.auth", "true");
     //Establishing a session with required user details
     Session session = Session.getInstance(props, new javax.mail.Authenticator() {
         protected PasswordAuthentication getPasswordAuthentication() {
             return new PasswordAuthentication("jag.javaprogram@gmail.com", "");
         }
     });
     try {
         //Creating a Message object to set the email content
         //MimeMessage msg = new MimeMessage(session);
         Message msg=new MimeMessage(session);
         //Storing the comma seperated values to email addresses
         String to = "rjagadeeswaran@gmail.com";
         /*Parsing the String with defualt delimiter as a comma by marking the boolean as true and storing the email
         addresses in an array of InternetAddress objects*/
         InternetAddress[] address = InternetAddress.parse(to, true);
         //Setting the recepients from the address variable
         msg.setRecipients(Message.RecipientType.TO, address);
         String timeStamp = new SimpleDateFormat("yyyymmdd_hh-mm-ss").format(new Date());
         msg.setSubject("Sample Mail : " + timeStamp);
         msg.setSentDate(new Date());
//         msg.setText("Hi this email is sent by me. Jag");
         String text="<div style=\"background-image: url('https://thumbs.dreamstime.com/b/invitation-background-8693923.jpg'); height: 600px; width: 800px;\"><br/><br/><br/><br/><br/><br/><br/><center>"+"<font face=\"broadway\" color=brown size=22>"+"Kindly <br/>grace <br/>the <br/>occassion <br/>with your <br/>presence.!"+"</font></center></div>\r\n";
         msg.setContent(text, "text/html");
         msg.setHeader("XPriority", "1");
        
         Transport.send(msg);
         System.out.println("Mail has been sent successfully");
     } catch (MessagingException mex) {
         System.out.println("Unable to send an email:\n" + mex);
     }

	}

}

===========================





SHA1 is one way encryption algorithm.
Means, there is no decryption key available.

What is encryption?
	converting plain text into cypher text is called as encryption.

raja
	is a plain text. you can understand

744c2eb8d3ae38473a69c23d228165894f6d7e57bd148d9e34d8d57ed59de7ca
	is the cypher text generated using SHA1	encryption algorithm

we can never decrypt a SHA1 encrypted text.

so there is no decryption key.


Use THIS SHA1 enc algo for password encryption.

DURING signup, user enters a password
	raja

it is encrypted and stored in the database as 
	744c2eb8d3ae38473a69c23d228165894f6d7e57bd148d9e34d8d57ed59de7ca

every time, they login, they enter 
	raja

we encrypt it again and get
	744c2eb8d3ae38473a69c23d228165894f6d7e57bd148d9e34d8d57ed59de7ca

this enc text is compared with the database value that is also 744c2eb8d3ae38473a69c23d228165894f6d7e57bd148d9e34d8d57ed59de7ca
744c2eb8d3ae38473a69c23d228165894f6d7e57bd148d9e34d8d57ed59de7ca

so both are matching



example for enc code:
----------------------
package com.cts.jf011;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

public class EncryptionDemo {

	
public static String encryptSha1(String password) throws NoSuchAlgorithmException
{
	//String password = "123456";
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] hashInBytes = md.digest(password.getBytes(StandardCharsets.UTF_8));
		// bytes to hex
        StringBuilder sb = new StringBuilder();
        for (byte b : hashInBytes) {
            sb.append(String.format("%02x", b));
        }
        //System.out.println(sb.toString());
	return sb.toString();
}
	
	public static void main(String[] args) throws NoSuchAlgorithmException {
		Scanner sc=new Scanner(System.in);
		String input=sc.nextLine();
		
		String output=encryptSha1(input);
		System.out.println(output);
	}

}





===========================

we can do enc in controller
	get the user inputs
	enc the password
	store it in db

during login
	get the user inputs
	enc the password
	check with the db

------------------------------