Yesterday, we deployed a spring boot application in aws elastic beanstalk
Today,
	deploy a spring boot application that connects with mysql database.


challenges????????
	when we run the project in our computer, 
		we specify (in application.properties)
			url
			driver
			username
			password
			dialect
			ddl2auto
			naming strategy

	These information, specifically
			url
			username
			password	(in my computer, i have a blank password. but in aws, it must be atleast 8 					characters)
	may differ in our computer vs aws server


solution:
	we should create a database in aws server.
	go the properties and note down the 
		endpoint	(localhost is the endpoint in our local system. but in aws, it will be different)
		

	we can create mysql database in RDS
	but, we can also create a mysql database while creating the application itself.





aa1tjih1k8w270n.ckmjh2funbrl.us-east-2.rds.amazonaws.com
aa1vwtiugrl4nio.cljtedwklhul.ap-south-1.rds.amazonaws.com

1) continue the rest api we created yesterday (hello message)
2) create a new spring boot application and continue
3) mvc project with front end (jsp) 

first, we create a sample application in aws.
	it will take time to create environment.
	on that time, we create code in sts




in existing project we are going to include "spring data jpa"

pom.xml:
	add dependencies for 
		spring data jpa
		mysql connection

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

in application.properties

spring.datasource.url=jdbc:mysql://localhost:3306/jf011
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.show_sql=true



#spring.mvc.view.prefix=/WEB-INF/views/
#spring.mvc.view.suffix=.jsp


spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE



How to create a RDS database in an existing application?
	go to env
		left side panel, there is Configuration
			once clicking the configuration, right side panel. scroll down to last


entities
shopping website

customer
product
order

entities become tables in the database
entities become class in java program

@Entity

Customer.java
CustomerRepository.java
CustomerService.java
CustomerController.java

test this rest api in post man 
	this is the role of 1 of your team member

Presentation/ Front end/ View/ UI

in MVC, we have controllers.
how a controller method can access a REST api?????
	Feign client
		transform the rest api into an interface that can be autowired into a controller
		then you just call the methods. NOT urls

nav
carousel		images will be sliding 
accordion		tabs. toggle tabs that expand or shrink while clicking it


aa1vwtiugrl4nio.cljtedwklhul.ap-south-1.rds.amazonaws.com
aa1vwtiugrl4nio.cljtedwklhul.ap-south-1.rds.amazonaws.com
3306
root
rootuser



in env configuration, go to database configuration and enable public access so that we can access this database from work bench

go to default security group and edit the inbound rules to all traffic (it was all TCP)




user service
	login
	logout
	signup
product service
order service


every service is a REST api

MVC project
	jsp	front end
	that will have controller	 (not rest controller)
		controller can redirect to other pages

	from controller, we access the rest api using feign client


mvc project
	jsp front end
	controller

all together is one .war file that we deploy in aws



MVC
	we deploy the .war file in elastic beanstalk using which platform
	not java, but tomcat


.jar file is deployed in "java" platform
.war file is deployed in "tomcat" platform



demo for feign client
why we use feign client?
	a controller wants to access another controller

rest api has rest controller		BranchControll	
we are going to access them from another project MVC project


1) create a spring boot application 
	jf011-aws-mvc-1

	choose WAR
	dependencies
		spring web
		jstl (not available here, later we add in the pom.xml)
2) application.properties
server.port=8383

spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

3) create a controller
	first test with a simple hello message.

	if you find error "web-inf" "meta-inf"
add the following dependency in pom.xml

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

4) it works. Now, lets create an entity class
	Branch

5) we need to access the REST api that we have deployed in aws

	http://awsdemo3-env.eba-9ujmpzmb.ap-south-1.elasticbeanstalk.com/branch

	this is the base url of REST api

to access a rest api from controller, we use feign client.

6) add open feign dependency in our pom.xml

	whenever we add open feign while creating the project itself, it is fine.

	But we are adding this open feign dependency later in pom.xml so add 
		<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>2020.0.4</spring-cloud.version>
	</properties>

7) create an interface that can be autowired to the controller.
	this interface maps the rest api methods 



	@PostMapping("")
	public Branch addBranch(@RequestBody Branch branch);
	
	@GetMapping("")
	public List<Branch> getAllBranches();

	@GetMapping("/{bid}")
	public Branch findBranchById(@PathVariable("bid") String bid);

	@PutMapping("")
	public Branch modifyBranch(@RequestBody Branch branch);

	@DeleteMapping("/{bid}")
	public String removeBranch(@PathVariable("bid") String bid);



=============
create an application in aws
	platform is tomcat

