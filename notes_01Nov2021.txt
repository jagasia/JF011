Once you complete a program or project,
before you hand over, 
find all unnecessary / observation code like System.out.println
and replace the neccessary observation code into log entries (INFO, DEBUG, WARN, ERROR)

You can choose same of different pattern for Console and File
File logs to have date and time
Console logs may have date or may not have

You may also have rolling log files with fixed size of file.

These log informations are very useful when we debug. (trace for logical errors)

----------------
Lombok
	@Data
	@AllArgsConstructor
	@NoArgConstructor

		generates the boilerplate code.

--------------
SonarQube
	tool is used to analyze the code quality of any maven project
		port 9000

	Bug
	Code smell
	Code debt

		code quality metrics

(code smell)
	commented out lines of code	
	comments are different from commented out code
	variable declared but not initialized or not used
	unreachable code
	class inside default package
------------------------------------------------------------
DATA STRUCTURES AND ALGORITHMS
-------------------------------
	Analysis of algorithms
		Why ds and algo?
			While solving a problem,
			in any program, there are 
				data
				logic


	in any program, (java terms) 
		variables
		methods

	A class has only these 2 things
		variable (or) constants			both are data members
		methods					contains the login ie., algorithm

	even in a simple problem,
		adding 2 numbers

	data: 2 numbers
	algo:	+


	we have algoirthms and datastructures in any program we write. 

	If you know the algorithm and 
	If you choose the right data structure, then
	your problem is solved


Why i say correct datastructure?

	You know? Binary search?
		in dictionary, we search for a "word".
		We do not start searching from the first word to the last word.

		we go to the middle of the book and predict or decide whether our word is in "left" or "right"

	in this way, we eliminate half of the book from searching.


This is called as binary search. 
Imagine, if the dictionary is not in A-Z order. we cannot perform binary search.

So, the binary search algorithm works only on a data structure which is already sorted.

Algorithm can be very effective but only when it is used on appropriate data structure.

Algorithms:
	searching
	sorting
	find the efficiency of algo:
		time complexity
		space complexity

		find the efficiency order of growth.	ie., when the size of the datastructure increases, then how the efficiency of the algorithm varies

		for ex:
			i use linear search. ie., start from first element, search until, found or end is reached
			the efficiency is proportional to the size of the ds.	small list? small amount of time. large list, large amount of time
			that is what the order of growth.

		but not all algorithms are like that. Some algo is efficient surprisingly in a different way
		some algorithms are poor efficient when sorting a list which is in descending order.
		desc order is another way of sorted element. but blindly if we apply bubble sort, it will take maximum time always irrespective of the list being already sorted 

Datastructures:
	Linear
	Non-linear	
-----------------------------------------
Linear
	Array
	LinkedList
	Stack
	Queue

These are linear datastructures
	because, they are linked like 
		1->2->3->4->5->6


	Linear means, there is an order.

If i ask you to tell A-Z

	ABCDEFGHIJKLMNOPQRSTUVWXYZ

if i ask you what is the 15th alphabet?
	O

that means, our memory is linear. Each alphabet knows what is next


ZYXWVUTSRQPONMLKJIHGFEDCBA

	now, i am able to do that, because, my memory is double linked list


This is what linked list.

Singly linked list can traverse from first to last only

Doubly linked list can travers from first to last and also from last to first


Arrays
	all of you know arrays.

Why arrays are not sufficient to solve some problems.
Why other datastructures are required.

Limitations of arrays.

Find the difference between various datastructures

	Array
	LinkedList
	Stack
	Queue

----------------------------------------------
What was the observation?
	What are the limitations of Arrays?
	Why do we need other data structures?


Arrays are fixed size. Cannot grow or shrink.
Size of the array must be known while creating the array. Before adding elements.

Suppose, you are booking 20 tickets for a movie, that is releasing on diwali.

	sometimes, you find a theater, where 20 tickets are available. But not in same row, and not continuous.

Arrays are contigeous means, they are allocated in continuous memory locations. 

memory waste happens, when an element is no more required. You cannot reduce the size of the Array.



in java, can you resize an array?

int arr[]=new int[10];
arr=new int[20];		//is it possible?		This line works in java.

But you are not resizing the array (arr). Rather you are creating a new array (though the variable name is same)

Arrays cannot be resized in java also.




	

scenario:
	if you are finding all the prime numbers between x and y.
	And you want to store those prime numbers in an array.

	What should be the size of the array?		will it be (x+y)/2?		or x+y?	cannot confirm that
							(x-y)/2?

	1 and 20

	x=1
	y=20

	3, 5, 7, 11, 13, 17, 19

	answer is 7

	-19/2
	=9 or 10 would be answer based on formula


	SO IT IS NOT EXACTLY the size of array needed to store prime numbers.

Array is not suitable for this scenario.

We need a datastructure that can store as many elements as required. and can grow or shrink.

LinkedList
Stack
Queue

When you learned java collections chapter, you learned 
	LinkedList
	ArrayList

LinkedList belongs java.util package
	can hold all the elements in the order in which they are added.

But, if you try to create a linked list using java language, then you are learning data structures.

Node.java
	class Node
	{
		String data;
		Node next;
	}

	class LinkedList
	{
		Node start;
	}


LinkedList
Stack
Queue

import java.util.Stack;

public class App2 {
	public static void main(String[] args) {
		
		Stack<String> stack=new Stack<>();
		stack.push("A");
		stack.push("B");
		stack.push("C");
		stack.push("D");
		stack.push("E");
		stack.push("F");
		stack.push("G");
		
		while(!stack.empty())
			System.out.println(stack.pop());
	}
}


Queue is an interface
some implementation of Queue?
	LinkedList
	PriorityQueue
		comparator or comparable are used







